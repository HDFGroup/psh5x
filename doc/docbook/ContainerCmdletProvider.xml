<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<sect1 xml:id="container_cmdlet_provider" xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0">

    <title>ContainerCmdletProvider</title>
    <para>The <literal>ContainerCmdletProvider</literal> class derives from the
            <literal>ItemCmdletProvider</literal> class and adds the notion of a <emphasis>container
            item</emphasis> that may contain other items. Items in a container are considerd child
        items which gives rise to a parent-child relationship. HDF5 groups are the only container
        items supported in PSH5X.</para>

    <sect2 xml:id="get_child_item">
        <title><literal>Get-ChildItem</literal></title>
        <para>Gets the HDF5 items and HDF5 child items in one or more specified locations.</para>
        <cmdsynopsis>
            <command>Get-ChildItem</command>
            <arg choice="req">-Path <replaceable>string[]</replaceable></arg>
            <arg choice="opt">-Name</arg>
            <arg choice="opt">-Recurse</arg>
            <arg choice="opt">-Detailed</arg>
            <arg choice="opt">-Filter [-][degst]</arg>
        </cmdsynopsis>
        <para> The <literal>Get-ChildItem</literal> cmdlet gets the items in one or more specified
            locations. If the item is an HDF5 group, it gets the items inside the container, known
            as child items. You can use the Recurse parameter to get items in all child
            containers.</para>
        <variablelist>
            <varlistentry>
                <term>-Path</term>
                <listitem>
                    <para>Specifies a path to one or more locations. Wildcards are permitted. The
                        default location is the current directory (.).</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-Name</term>
                <listitem>
                    <para>Retrieves only the names of the items in the locations. If you pipe the
                        output of this command to another command, only the item names are
                        sent.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-Recurse</term>
                <listitem>
                    <para>Gets the items in the specified locations and in all child items of the
                        locations.</para>
                    <para>Recurse works only when the path points to a container that has child
                        items, such as <literal>h5tmp:\</literal> or <literal>h5tmp:\*</literal>,
                        and not when it points to items that do not have child items.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-Detailed</term>
                <listitem>
                    <para>Retrieve detailed information about each child item.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-Filter</term>
                <listitem>
                    <para>This parameter can be used to specify a filter on the types of items to be
                        retrieved or to be suppressed. <emphasis>Filters are more
                            efficient</emphasis> than other parameters, because the provider applies
                        them when retrieving the objects, rather than having PowerShell filter the
                        objects after they are retrieved.</para>
                    <para>The PSH5X item filter either includes items of the types listed (e.g.,
                        only groups and datasets) to the exclusion of all other item types, or it
                        suppresses all items of types listed and includes all types not listed. The
                        items type abbreviations are as follows: <simplelist>
                            <member><literal>d</literal> - datasets</member>
                            <member><literal>e</literal> - external links</member>
                            <member><literal>g</literal> - groups</member>
                            <member><literal>s</literal> - soft links</member>
                            <member><literal>t</literal> - named datatypes</member>
                        </simplelist> For example, <literal>-Filter g</literal> retrieves only
                        groups to the exclusion of all other item types, and <literal>-Filter
                            -dg</literal> suppresses all datasets and groups.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Getting the children of the PSDrive with root <literal>h5tmp:\</literal></title>
            <screen><prompt>PS:1 ></prompt> <command>Get-ChildItem h5tmp:\</command>
                
   PSParentPath: HDF5\HDF5::h5tmp:

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
dset1                    Dataset    8/8/2011 4:07:21 PM    0
dset2                    Dataset    8/8/2011 4:05:00 PM    0
dset3                    Dataset    8/8/2011 4:05:00 PM    0
group1                   Group      1/1/1970 12:00:00 AM   0
group2                   Group      1/1/1970 12:00:00 AM   0
slink1                   SoftLink
type1                    Datatyp... 1/1/1970 12:00:00 AM   0</screen>
        </example>
        <example>
            <title>Getting the children of the PSDrive with root <literal>h5tmp:\</literal> using wildcards</title>
            <screen><prompt>PS:1 ></prompt> <command>Get-ChildItem h5tmp:\dset*</command>

   PSParentPath: HDF5\HDF5::h5tmp:

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
dset1                    Dataset    8/8/2011 4:07:21 PM    0
dset2                    Dataset    8/8/2011 4:05:00 PM    0
dset3                    Dataset    8/8/2011 4:05:00 PM    0</screen>
        </example>
        <example>
            <title>Recursively getting the children of the PSDrive with root
                    <literal>h5tmp:\</literal></title>
            <screen><prompt>PS:1 ></prompt> <command>Get-ChildItem h5tmp:\ -Recurse | Sort-Object PSParentPath</command>

   PSParentPath: HDF5\HDF5::h5tmp:

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
group2                   Group      1/1/1970 12:00:00 AM   0
slink1                   SoftLink
type1                    Datatyp... 1/1/1970 12:00:00 AM   0
group1                   Group      1/1/1970 12:00:00 AM   0
dset2                    Dataset    8/24/2011 12:11:37 PM  0
dset1                    Dataset    8/24/2011 12:11:37 PM  0
dset3                    Dataset    8/24/2011 12:11:37 PM  0

   PSParentPath: HDF5\HDF5::h5tmp:\group1

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
dset3                    Dataset    8/24/2011 12:11:37 PM  0</screen>
        </example>
        <example>
            <title>Recursively getting the children of a PSDrive which are symbolic links or named
                datatypes</title>
            <screen><prompt>PS:1 ></prompt> <command>Get-ChildItem h5tmp:\ -Recurse -Filter st | Sort-Object PSParentPath</command>

   PSParentPath: HDF5\HDF5::h5tmp:

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
type1                    Datatyp... 1/1/1970 12:00:00 AM   0
slink1                   SoftLink</screen>
        </example>
        <example>
            <title>Recursively getting the children of a PSDrive which are not symbolic links or
                named datatypes</title>
            <screen><prompt>PS:1 ></prompt> <command>Get-ChildItem h5tmp:\ -Recurse -Filter -st | Sort-Object PSParentPath</command>
   PSParentPath: HDF5\HDF5::h5tmp:

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
group1                   Group      1/1/1970 12:00:00 AM   0
group2                   Group      1/1/1970 12:00:00 AM   0
dset3                    Dataset    8/24/2011 12:11:37 PM  0
dset1                    Dataset    8/24/2011 12:11:37 PM  0
dset2                    Dataset    8/24/2011 12:11:37 PM  0

   PSParentPath: HDF5\HDF5::h5tmp:\group1

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
dset3                    Dataset    8/24/2011 12:11:37 PM  0</screen>
        </example>
    </sect2>

    <sect2 xml:id="new_item">
        <title><literal>New-Item</literal></title>
        <para>Creates a new HDF5 item.</para>
        <cmdsynopsis>
            <command>New-Item</command>
            <arg choice="req">-Path <replaceable>string[]</replaceable></arg>
            <arg choice="req">-Name <replaceable>string</replaceable></arg>
            <arg choice="req">-ItemType <group>
                    <option>Dataset,</option>
                    <option>Datatype,</option>
                    <option>Group,</option>
                    <sbr/>
                    <option>ExtLink,</option>
                    <option>HardLink,</option>
                    <option>Image,</option>
                    <option>SoftLink</option>
                </group>
            </arg>
            <arg choice="opt">-Value <replaceable>Object</replaceable></arg>
        </cmdsynopsis>
        <para> The <literal>New-Item</literal> cmdlet creates a new item and sets its value (if
            applicable). The basic syntax of <literal>New-Item</literal> is shown. It consists of
            the new item's name, its type, and its value. Depending on the item type additional
            options may be required and are shown separated by item type.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-Name</literal></term>
                <listitem>
                    <para>Specifies the name of the new item. You can use this parameter to specify
                        the name of the new item, or include the name in the value of the
                            <literal>Path</literal> parameter.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-Path</term>
                <listitem>
                    <para>Specifies the path to the location of the new item. Wildcards are
                        permitted.</para>
                    <para> You can specify the name of the new item in the <literal>Name</literal>
                        parameter, or include it in the <literal>Path</literal> parameter.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-ItemType</term>
                <listitem>
                    <para>Specifies the type of the new item.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-Value</term>
                <listitem>
                    <para>Specifies the value of the new item.</para>
                </listitem>
            </varlistentry>
        </variablelist>

        <sect3>
            <title>HDF5 Dataset</title>
            <para>One or more of the following options must be specified for creating a new HDF5
                dataset. Currently, the <literal>-Value</literal> argument has no meaning for
                datasets.</para>
            <cmdsynopsis>
                <arg choice="req">-ElementType <replaceable>Object</replaceable></arg>
                <arg choice="req">-Dimensions <replaceable>Int64[]</replaceable></arg>
                <arg choice="opt">-MaxDimensions <replaceable>Int64[]</replaceable></arg>
                <sbr/>
                <arg choice="opt">-Chunked <replaceable>Int64[]</replaceable></arg>
                <arg choice="opt">-Compact</arg>
                <arg choice="opt">-Gzip <replaceable>[0..9]</replaceable></arg>
            </cmdsynopsis>
        </sect3>

        <sect3>
            <title>HDF5 Datatype</title>
            <para>The following options must be specified for creating a new named HDF5
                datatype.</para>
            <cmdsynopsis>
                <arg choice="req">-Definition <replaceable>Object</replaceable></arg>
            </cmdsynopsis>
        </sect3>

        <sect3>
            <title>HDF5 Group</title>
            <para>No additional options need to be specified for creating a new HDF5 group.
                Currently, the <literal>-Value</literal> argument has no meaning for groups.</para>
        </sect3>

        <sect3>
            <title>HDF5 External Link</title>
            <para>The <literal>-Value</literal> argument must be a string array of length two. The
                first element is used as the file name and the second must be a well-formed HDF5
                path name.</para>
        </sect3>

        <sect3>
            <title>HDF5 Hard Link</title>
            <para> The <literal>-Value</literal> argument must be a string containing a valid HDF5
                path name.</para>
        </sect3>

        <sect3>
            <title>HDF5 Image</title>
            <para>See <citation>HDF5_Image</citation> for the HDF5 Image and Palette
                specification.</para>
            <para> If the <literal>-Value</literal> argument is specified, it is expected to be the
                name of an image file. All of the image characteristics (bits, widht, height etc.)
                will be inferred and no other options need to be specified. Otherwise the following
                options must be specified for creating a new HDF5 image.</para>
            <cmdsynopsis>
                <arg choice="req">-Bits <replaceable>[8,24]</replaceable></arg>
                <arg choice="req">-WxH <replaceable>Int64[2]</replaceable></arg>
                <arg choice="req">-InterlaceMode <group>
                        <option>Plane,</option>
                        <option>Pixel</option>
                    </group>
                </arg>
            </cmdsynopsis>
        </sect3>

        <sect3>
            <title>HDF5 Soft Link</title>
            <para>The <literal>-Value</literal> argument must be a string containing a well-formed
                HDF5 path name.</para>
        </sect3>

    </sect2>

    <sect2 xml:id="remove_item">
        <title><literal>Remove-Item</literal></title>
        <para>Deletes the specified HDF5 items.</para>
        <cmdsynopsis>
            <command>Remove-Item</command>
            <arg choice="req">-Path <replaceable>string[]</replaceable></arg>
            <arg choice="opt">-Recurse</arg>
        </cmdsynopsis>
        <para> The <literal>Remove-Item</literal> cmdlet deletes one or more items. Because it is
            supported by many providers, it can delete many different types of items. </para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>Specifies a path to the items being removed. Wildcards are
                        permitted.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Remove items with a wildcard</title>
            <screen><prompt>PS:1 ></prompt> <command>Remove-Item h5tmp:\dset*</command></screen>
        </example>
    </sect2>

    <sect2 xml:id="rename_item">
        <title><literal>Rename-Item</literal></title>
        <para>Renames an item in the PSH5X provider namespace.</para>
        <cmdsynopsis>
            <command>Rename-Item</command>
            <arg choice="req">-Path <replaceable>string</replaceable></arg>
            <arg choice="req">-NewName <replaceable>string</replaceable></arg>
        </cmdsynopsis>
        <para>The <literal>Rename-Item</literal> cmdlet changes the name of a specified item. This
            cmdlet does not affect the content of the item being renamed. You cannot use Rename-Item
            to move an item, such as by specifying a path along with the new name. To move and
            rename an item, use the <literal>Move-Item</literal> cmdlet.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>Specifies the path to the item to rename.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>-NewName</literal></term>
                <listitem>
                    <para>Specifies the new name of the item. Enter only a name, not a path and
                        name. If you enter a path that is different from the path that is specified
                        in the Path parameter, <literal>Rename-Item</literal> generates an error. To
                        rename and move an item, use the <literal>Move-Item</literal> cmdlet. You
                        cannot use wildcard characters in the value of <literal>NewName</literal>.
                        To specify a name for multiple files, use the <literal>Replace</literal>
                        operator in a regular expression.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Remove items with a wildcard</title>
            <screen><prompt>PS:1 ></prompt> <command>Remove-Item h5tmp:\dset*</command></screen>
        </example>
    </sect2>

    <sect2 xml:id="copy_item">
        <title><literal>Copy-Item</literal></title>
        <para>Copies an HDF5 item from one location to another within a namespace.</para>
        <cmdsynopsis>
            <command>Get-Location</command>
            <arg choice="req">-Path <replaceable>string[]</replaceable></arg>
            <arg choice="req">-Destination <replaceable>string</replaceable></arg>
            <arg choice="opt">-Container</arg>
        </cmdsynopsis>
        <para>The Copy-Item cmdlet copies an item from one location to another in a names pace.
            Copy-Item does not delete the items being copied. The particular item s that the cmdlet
            can copy depend on the Windows PowerShell providers avail able. For example, when used
            with the FileSystem provider, it can copy file s and directories and when used with the
            Registry provider, it can copy reg istry keys and entries.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>Specifies the path to the items to copy.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>-Destination</literal></term>
                <listitem>
                    <para>Specifies the path to the location where the items are to be
                        copied.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>-Container</literal></term>
                <listitem>
                    <para>Preserves container objects during the copy operation.</para>
                </listitem>
            </varlistentry>
        </variablelist>

        <note>
            <para>Under development.</para>
        </note>
    </sect2>

    <sect2 xml:id="get_location">
        <title><literal>Get-Location</literal></title>
        <para> Gets information about the current working location.</para>
        <cmdsynopsis>
            <command>Get-Location</command>
            <arg choice="opt">-PSDrive <replaceable>string[]</replaceable></arg>
            <arg choice="opt">-PSProvider <replaceable>string[]</replaceable>
            </arg>
        </cmdsynopsis>
        <para>The <literal>Get-Location</literal> cmdlet gets an object that represents the current
            directory, much like the pwd (print working directory) command. </para>
        <para> When you move between PowerShell drives, PowerShell retains your location in each
            drive. You can use <literal>Get-Location</literal> to find your location in each
            drive.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-PSDrive</literal></term>
                <listitem>
                    <para>This parameter is used to specify the path to a new working
                        location.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>-PSProvider</literal></term>
                <listitem>
                    <para>This parameter is used to specify the path to a new working
                        location.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Working with locations</title>
            <screen><prompt>PS:1 ></prompt> <command>Get-Location</command>

Path
----
C:\

<prompt>PS:2 ></prompt> <command>Set-Location h5tmp:\group1</command>
<prompt>PS:3 ></prompt> <command>Push-Location</command>
<prompt>PS:4 ></prompt> <command>Set-Location D:\</command>
<prompt>PS:5 ></prompt> <command>Pop-Location</command>
<prompt>PS:6 ></prompt> <command>Get-Location</command>
                
Path
----
h5tmp:\group1</screen>
        </example>
    </sect2>

    <sect2 xml:id="set_location">
        <title><literal>Set-Location</literal></title>
        <para>Sets the current working location to a specified location.</para>
        <cmdsynopsis>
            <command>Set-Location</command>
            <arg choice="req">-Path <replaceable>string</replaceable></arg>
        </cmdsynopsis>
        <para>The <literal>Set-Location</literal> cmdlet sets the working location to a specified
            location. That location must be an item that corresponds to an HDF5 group.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>This parameter is used to specify the path to a new working
                        location.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Set the working location to <literal>h5tmp:\group2</literal></title>
            <screen><prompt>PS:1 ></prompt> <command>Set-Location h5tmp:\group2; Get-ChildItem</command>
      
   PSParentPath: HDF5\HDF5::h5tmp:\group2

LinkName                 ItemType   LastWriteTime          #Attr.
--------                 --------   -------------          ------
dset3                    Dataset    8/8/2011 4:05:00 PM    0</screen>
        </example>
    </sect2>

    <sect2 xml:id="push_location">
        <title><literal>Push-Location</literal></title>
        <para>Adds the current location to the top of a list of locations (a "stack").</para>
        <cmdsynopsis>
            <command>Push-Location</command>
            <arg choice="req">-Path <replaceable>string</replaceable></arg>
            <arg choice="opt">-StackName <replaceable>string</replaceable></arg>
        </cmdsynopsis>
        <para> The <literal>Push-Location</literal> cmdlet adds ("pushes") the current location to
            the top of a list of locations, called a "stack." You can push the current location onto
            a default stack or onto a stack that you create. If you specify a path,
                <literal>Push-Location</literal> pushes the current location onto the stack and then
            changes the current location to the location specified by the path. You cannot push a
            location onto the stack unless it is the current location. </para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>Changes your location to the location specified by this path after it adds
                        (pushes) the current location onto the top of the stack. Enter a path to any
                        location whose provider supports this cmdlet. Wildcards are permitted. The
                        parameter name <literal>Path</literal> is optional.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>-StackName</literal></term>
                <listitem>
                    <para>Specifies the name of a stack. The current location is pushed onto this
                        stack, and this stack becomes the current stack. If the stack does not yet
                        exist, it is created.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect2>

    <sect2 xml:id="pop_location">
        <title><literal>Pop-Location</literal></title>
        <para>Changes the current location to the location most recently pushed onto the stack. You
            can pop the location from the default stack or from a stack that you create by using the
            Push-Location cmdlet.</para>
        <cmdsynopsis>
            <command>Pop-Location</command>
            <arg choice="opt">-StackName <replaceable>string</replaceable></arg>
        </cmdsynopsis>
        <para> The <literal>Pop-Location</literal> cmdlet changes the current location to the
            location most recently pushed onto the stack by using the
                <literal>Push-Location</literal> cmdlet. You can pop a location from the default
            stack or from a stack that you create by using a <literal>Push-Location</literal>
            command. </para>
        <variablelist>
            <varlistentry>
                <term><literal>-StackName</literal></term>
                <listitem>
                    <para>Specifies an alternate stack. <literal>Pop-Location</literal> pops the
                        most recently added location from this stack. This stack then becomes the
                        current stack.</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </sect2>

    <sect2 xml:id="resolve_path">
        <title><literal>Resolve-Path</literal></title>
        <para>Resolves the wildcard characters in a path, and displays the path contents.</para>
        <cmdsynopsis>
            <command>Resolve-Path</command>
            <arg choice="req">-Path <replaceable>string[]</replaceable></arg>
        </cmdsynopsis>
        <para> The <literal>Resolve-Path</literal> cmdlet interprets the wildcard characters in a
            path and displays the items and containers at the location specified by the path, such
            as the HDF5 datasets and groups.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>Specifies the PowerShell path to resolve. This parameter is
                        required.</para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Resolving a path</title>
            <screen><prompt>PS:1 ></prompt> <command>Resolve-Path h5tmp:\dset*</command>

Path
----
h5tmp:\dset1
h5tmp:\dset2
h5tmp:\dset3</screen>
        </example>
    </sect2>

    <sect2 xml:id="test_path">
        <title><literal>Test-Path</literal></title>
        <para>Determines whether all elements of a path exist.</para>
        <cmdsynopsis>
            <command>Test-Path</command>
            <arg choice="req">-Path <replaceable>string[]</replaceable></arg>
            <arg choice="opt">-IsValid</arg>
            <arg choice="opt">-PathType <group>
                    <option>Container,</option>
                    <option>Leaf,</option>
                    <option>Any</option>
                </group>
            </arg>
        </cmdsynopsis>
        <para> The <literal>Test-Path</literal> cmdlet determines whether all elements of the path
            exist. It returns TRUE ($true) if all elements exist and FALSE ($false) if any are
            missing. It can also tell whether the path syntax is valid and whether the path leads to
            a container or a terminal (leaf) element.</para>
        <variablelist>
            <varlistentry>
                <term><literal>-Path</literal></term>
                <listitem>
                    <para>Specifies a path to be tested. Wildcards are permitted. If the path
                        includes spaces, enclose it in quotation marks.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-IsValid</term>
                <listitem>
                    <para> Determines whether the syntax of the path is correct, regardless of whe
                        ther the elements of the path exist. This parameter returns TRUE if the path
                        syntax is valid and FALSE if it is not.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>-PathType</term>
                <listitem>
                    <para> Tells whether the final element in the path is of a particular type. This
                        parameter returns TRUE if the element is of the specified type and FALSE if
                        it is not. </para>
                    <para> Valid values are: <variablelist>
                            <varlistentry>
                                <term>Container</term>
                                <listitem>
                                    <para>An element that contains other elements, such as a
                                        directory or registry key.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Leaf</term>
                                <listitem>
                                    <para>An element that does not contain other elements, such as a
                                        file.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>Any</term>
                                <listitem>
                                    <para> Either a container or a leaf. Tells whether the final
                                        element in the path is of a particular type. Returns TRUE if
                                        the element is of the specified type and FALSE if it is
                                        not.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <example>
            <title>Testing paths</title>
            <screen><prompt>PS:1 ></prompt> <command>Test-Path h5tmp:\dset*</command>
True
<prompt>PS:2 ></prompt> <command>Test-Path h5tmp:\dsett*</command>
False
<prompt>PS:3 ></prompt> <command>Test-Path h5tmp:\dset* -IsValid</command>
True
<prompt>PS:3 ></prompt> <command>Test-Path h5tmp:\dset* -PathType Container</command>
False</screen>
        </example>
    </sect2>

</sect1>
