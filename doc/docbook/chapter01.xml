<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbookxi.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<chapter xml:id="what_is_psh5x" xmlns="http://docbook.org/ns/docbook"
  xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
  <title>What is PSH5X?</title>

  <para><emphasis role="bold">P</emphasis>ower<emphasis role="bold">S</emphasis>hell <emphasis
      role="bold">H</emphasis>DF<emphasis role="bold">5</emphasis> e<emphasis role="bold"
      >X</emphasis>tension is a PowerShell snap-in (a .NET DLL) that contains a PowerShell provider
    and other supporting cmdlets for accessing HDF5 files (stores). The PowerShell provider
    architecture is the "secret sauce" behind the consistent user experience across a diverse set of
    data stores, such as the Windows Registry, certificate stores, and Active Directory. PSH5X is an
    attempt to add a member to that ensemble of providers orchestrated by the provider
    architecture.</para>

  <sect1 xml:id="windows_powershell_providers">
    <title>A Windows PowerShell Provider</title>
    <para>The Windows PowerShell provider architecture consists of a set of <emphasis>core
        cmdlets</emphasis> for manipulating entities that it refers to as <emphasis>items</emphasis>
      and <emphasis>properties</emphasis>, that may have values and/or <emphasis>content</emphasis>.
      The actual mapping of these entities and the semantics of the core cmdlets for a particular
      type of data store is at the discretion of the managing provider. For PSH5X the mapping is as
      follows:</para>
    <table xml:id="items_et_properties_table">
      <title>PSH5X Items and Properties</title>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Item</entry>
            <entry>Value</entry>
            <entry>Content</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>HDF5 Group</entry>
            <entry>N/A</entry>
            <entry>N/A</entry>
          </row>
          <row>
            <entry>HDF5 Dataset</entry>
            <entry>Current extent (dimensions)</entry>
            <entry>Data elements</entry>
          </row>
          <row>
            <entry>HDF5 Named Datatype</entry>
            <entry>N/A</entry>
            <entry>N/A</entry>
          </row>
          <row>
            <entry>HDF5 Hard Link</entry>
            <entry>N/A</entry>
            <entry>N/A</entry>
          </row>
          <row>
            <entry>HDF5 Soft Link</entry>
            <entry>HDF5 path name</entry>
            <entry>N/A</entry>
          </row>
          <row>
            <entry>HDF5 External Link</entry>
            <entry>File name/HDF5 path name</entry>
            <entry>N/A</entry>
          </row>
        </tbody>
      </tgroup>
      <tgroup cols="3">
        <thead>
          <row>
            <entry>Property</entry>
            <entry>Value</entry>
            <entry>Content</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>HDF5 Attribute</entry>
            <entry>Attribute value</entry>
            <entry>N/A</entry>
          </row>
        </tbody>
      </tgroup>
    </table>
    <para>For example, according to PSH5X, an HDF5 soft link is an item that has a value, but no
      content. In turn, a cmdlet such as <literal>Set-Item</literal> can be used to set and/or
      change that value, but a cmdlet like <literal>Get-Content</literal> will not return anything
      for an HDF5 symbolic link.</para>
    <para> In software, the provider architecture is represented as a hierarchy of five classes and
      a set of four interfaces. In <xref linkend="appdx_psh5x_layers"/>, a cartoon of these classes
      and the cmdlets they support is shown. The structure of an HDF5 store is sufficiently rich to
      warrant an implementation of the most featureful provider base class,
        <literal>NavigationCmdletProvider</literal>, which includes support for nested containers
      (HDF5 groups) and navigation (HDF5 path names). PSH5X also implements both property interfaces
      (HDF5 attributes) and the content interface (value of HDF5 datasets). Currently, there is no
      standardized notion of Access Control Lists in HDF5, which is why the
        <literal>ISecurityDescriptorCmdletProvider</literal> interface was not implemented in this
      version of PSH5X.</para>
  </sect1>

  <sect1>
    <title>A Collection of Windows PowerShell Cmdlets</title>
    <para>PSH5X also includes a set of utility cmdlets, for example, to look up type information
    or to construct an array of a certain element type.</para>
  </sect1>

  <sect1>
    <title>Path-ology</title>
    <para>Providers use paths to locate items in a data source.</para>
  </sect1>

  <sect1>
    <title>Conventions</title>
    <para/>
  </sect1>

</chapter>
