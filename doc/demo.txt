# Load the HDF5 PowerShell extension PSH5X
Add-PSSnapin HDF5
# List a few sample HDF5 files
Get-ChildItem E:\HDF5\h5
# Show existing drives; notice the HDF5 sandbox h5tmp:\
Get-PSDrive
# Show HDF5 sandbox
$a = (Get-Item Env:\PSH5XTmpFile).Value; $a,(Test-Path $a)
# Create a new PSDrive backed by an HDF5 file
New-PSDrive -Name aura -PSProvider HDF5 -Root aura:\ -Path E:\HDF5\h5\HIRDLS-Aura_L2_v02-04-09-c03_2008d001.he5 -Mode RO
# Show existing drives
Get-PSDrive
# PSH5X Items => HDF5 Links + Objects
# i.e., HDF5 Groups, Datasets & Datatype Objects
# List child items in the HDF5 root group on the 'aura' drive
Get-ChildItem aura:\
# Create a few more PSDrives backed by HDF5 files
New-PSDrive chi HDF5 chi:\ -Path E:\HDF5\h5\test_ch_g05_d10000_r0000020_c0000_l0_z0.h5
New-PSDrive met HDF5 met:\ -Path E:\HDF5\h5\MET_TG_met0001_QL.h5
# Force the creation of a new HDF5 file as a drive creation side effect 
New-PSDrive foo HDF5 foo:\ -Path "$Env:TEMP\foo.h5" -Force; Get-Item "$Env:TEMP\foo.h5"
# Cleanup
Remove-PSDrive foo; Remove-Item "$Env:TEMP\foo.h5"
# Show existing drives
Get-PSDrive | Where-Object {$_.Provider.Name -eq 'HDF5' }
# What's happening in 'met'?
Get-ChildItem met:\ -Recurse
# Get more detail on met:\TempRH
Get-Item met:\TempRH | Format-List
# These are NOT strings!!!
Get-Item met:\TempRH | Get-Member 
# Get even more detail on met:\TempRH
Get-Item met:\TempRH -Detailed | Format-List
# Get attribute names
(Get-Item met:\TempRH).AttributeNames
# PSH5X Properties represent HDF5 Attributes
Get-ItemProperty met:\TempRH -Name LocationUTM
# Retrieve multiple arguments? Sure!
Get-ItemProperty met:\TempRH -Name DIMENSION_LIST,LocationUTM,QA,SOURCE,UTM_Zone
# How do I access an individual property? Hashtable... 
$a = (Get-ItemProperty met:\TempRH -Name DIMENSION_LIST,LocationUTM,QA,Source,UTM_Zone); $a['LocationUTM']
# Let's go back to 'aura'!
Get-ChildItem aura:\ -Recurse | Sort-Object -Property PSParentPath
# Pretty busy. Let's try something visual! 
Get-ChildItem aura:\ -r | Sort-Object PSParentPath | Select-Object PSPath,ItemType,@{Name='LastWriteTime';Expression={$_.Timestamps['ChangeTime']}},AttributeCount | Out-GridView
# Search for water!
dir aura:\ -r | where {$_.PSChildName -like "*H2O*"} | select PSPath
# How many items (HDF5 objects) are there?
Get-ChildItem aura:\ -Recurse | Measure-Object | Select-Object Count
# How many HDF5 groups are there?
Get-ChildItem aura:\ -Recurse | Where-Object {$_.ItemType -eq 'Group'} | Measure-Object | Select-Object Count
# Where are they?
Get-ChildItem aura:\ -Recurse | Where-Object {$_.ItemType -eq 'Group'} | Select-Object PSPath
# Yes, you can 'cd' into an HDF5 PSDrive (using '/' or '\')
Set-Location 'aura:/HDFEOS/SWATHS/HIRDLS/Geolocation Fields' ; Get-ChildItem .
# And the usual aliases just work... (tab-completion works also)
cd .. ; dir
# What about large HDF5 structures? (filter for groups)
Get-ChildItem chi:\g\g_00 -Recurse | Where-Object {$_.ItemType -eq 'Group'} | Measure-Object | Select-Object Count
# What about large HDF5 structures? (no filter)
Get-ChildItem chi:\g\g_00 -Recurse | Measure-Object | Select-Object Count
# How long did the recursion take? (without the group filter)
Measure-Command { Get-ChildItem chi:\g\g_00 -Recurse }
# Notice that aura:\HDFEOS\SWATHS\HIRDLS is still our working directory
Get-Location; c: ; Get-Location
# Create a new HDF5 group 
New-Item -Path h5tmp:\A -ItemType Group
# Force the creation of intermediate HDF5 groups
New-Item -Path h5tmp:\A\B\C -ItemType Group -Force; dir h5tmp: -r
# Create multiple HDF5 groups in one shot
New-Item -Path h5tmp:\A\D,h5tmp:\A\'E,F',h5tmp:/A/G/H -ItemType Group -Force
# Too much typing?
# Function New-H5Group([String[]] $path, [Switch] $Force)
# { 
#   if ($Force) { New-Item -Path $path -ItemType Group -Force }
#   else        { New-Item -Path $path -ItemType Group }
# }
Function New-H5Group([String[]] $path,[Switch] $Force) { if ($Force) { New-Item -Path $path -ItemType Group -Force } else { New-Item -Path $path -ItemType Group }}
# Now we can say this:
New-H5Group h5tmp:\group,h5tmp:\group1\group2\group3 -Force
# Create a new dataset
New-Item -Path h5tmp:\A\dset -ItemType Dataset -ElementType double -Dimensions 4,4,4 -MaxDimensions 4,-1,55 -Chunked 4,16,11 -Gzip 6
# Add a scalar long HDF5 attribute
New-ItemProperty -Path h5tmp:\A -Name attr -ElementType long
# Add a simple 4x3x2 HDF5 attribute
New-ItemProperty -Path h5tmp:/A/B -Name attr -ElementType double -Simple 4,3,2
# Add a null HDF5 attribute
New-ItemProperty -Path h5tmp:/A/B -Name attr1 -ElementType int -Null
# Rename it
Rename-ItemProperty -Path h5tmp:/A/B -Name attr1 -NewName null-attribute -PassThru
# Display item
Get-Item h5tmp:/A/B -Detailed | Format-List
# More complex types?
# $t = @{
#   Class='Compound';
#   Size=40;
#   Components=@{
#     a=@{
#       Class='Vlen';
#       Type='int';
#       MemberOffset=0
#     };
#     b=@{
#       Class='Array';
#       Type='Float';
#       Dims=@(2,2);
#       MemberOffset=16
#     }
#   }
# }
$t = @{Class='Compound';Size=40;Components=@{a=@{Class='Vlen';Type='int';MemberOffset=0};b=@{Class='Array';Type='Float';Dims=@(2,2);MemberOffset=16}}}
# Now create an HDF5 attribute
New-ItemProperty -Path h5tmp:\ -Name complex -ElementType $t
# Let's have a look!
& 'C:\Program Files\TheHDFGroup\HDFView2.7\HDFView.exe' $Env:PSH5XTmpFile
#
# Whaddya think?
#
