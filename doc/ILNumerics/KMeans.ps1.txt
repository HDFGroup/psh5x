Import-Module ILNumerics

################################################################################
# <summary>
# k-means clustering: find clusters in data matrix X
# </summary>
# <param name="X">Data matrix, data points are expected as columns</param>
# <param name="k">Number of clusters</param>
# <returns>Vector of length n with indices of the clusters which were assigned
#    to each datapoint</returns>
################################################################################

Function KMeans
{
    param([ilif64] $X, [int] $k)

    ILUsing ([ilscope]::Enter($X, $k)) {

        if([ilmath]::isnull($X) -or -not $X.IsMatrix) {
            Write-Error 'X must be a matrix'
            exit
        }
        if ($X.IsEmpty) {
            return [ilrf64] [ilmath]::empty([ilmath]::size(0, $n))
		}
        if ($k -lt 1) {
            Write-Error 'number of clusters k must be positive'
            exit
        }
        if ($X.S[1] -lt $k) {
            Write-Error "too few datapoints provided for $k clusters"
            exit
        }
        $d = $X.S[0]; $n = $X.S[1]

        # initialize centers by using random datapoints
        [ilf64] $pickIndices = [ilmath]::empty();
        [ilmath]::sort([ilmath]::rand(1,$n), $pickIndices, 1, $False).Dispose()
        [ilf64] $centers.a = $X.Subarray((':', $pickIndices["0:$($k-1)"]))

        [ilf64] $classes = [ilmath]::zeros(1, $n)
        [ilf64] $oldCenters = $centers.C
		
        $maxIterations = 10000 
        while ($maxIterations-- -gt 0)
        {
	        # assign every datapoint to nearest center
            for ($i = 0; $i -lt $n; ++$i)
            {
		        # nested 'using' block for efficient memory performance
                ILUsing ([ilscope]::Enter()) {

                    [ilf64] $minDistIdx = [ilmath]::empty()
					# find the 'min'imal cluster distance 
                    [ilmath]::min([ilmath]::distL1($centers, $X[":;$i"]), `
						# take the cluster index ... `
                        $minDistIdx, 1).Dispose()
					# and use it as i-th class assignment 
                    $classes[$i] = [double]$minDistIdx[0]
                }
            }
            # update the centers
            for ($i = 0; $i -lt $k; ++$i)
            {
                ILUsing ([ilscope]::Enter()) {
                    # find indices of all matching class members
                    $r = [ilmath]::find([ilmath]::eq($classes, [double]$i))
                    # extract corresponding member array
                    $inClass = [ilf64] $X.Subarray((':', $r))

                    if ($inClass.IsEmpty) {
                        $centers[":;$i"] = [double]::NaN
                    } else {
                        # compute the new cluster center (mean)
                        $centers[":;$i"] = [ilf64] [ilmath]::mean($inClass, 1)
                    }
                }
            }
            # if cluster stayed the same - break.. 
            if ([ilmath]::allall([ilmath]::eq($oldCenters, $centers))) {
                break;
            }
            # keep current centers for next round
            $oldCenters.a = $centers.C
        }
	    # must return class assignments as proper array type! 
	    # i.e. 'ilrf64' as alias for ILRetArray<double>
        , [ilrf64] $classes
    }
}
